name: Build and Deploy
on:
  push:
    branches: [master]
    paths-ignore:
      - "README.md"
      - "ci/**"
      - "clients/**"
      - "services/api/README.md"
      - "docker-compose.yml"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
# Allow the action to get the required token
permissions:
  id-token: write
  contents: read

env:
  DOCKER_REGISTRY: "acrrntdemoapp.azurecr.io"
 
jobs: 
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 'Az CLI login with OpenID Connect'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: 'Get access token to ACR via Az CLI'
      uses: azure/CLI@v1
      with:
        azcliversion: 2.42.0
        inlineScript: |
          TOKEN=$(az acr login --name ${{ env.DOCKER_REGISTRY }} --expose-token -o tsv --query accessToken)
          echo "ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV
    - name: 'Login to ACR using access token'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: "00000000-0000-0000-0000-000000000000"
        password: ${{ env.ACCESS_TOKEN }}
    # need checkout before using compose-action    
    - uses: actions/checkout@v3
    - name: 'Write short sha to outputs'
      id: vars
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
    - name: "Build images using Docker Compose"
      run: docker-compose -f docker-compose.build.yml build common api background-worker
      env:
        BUILD_VERSION: ${{ steps.vars.outputs.SHORT_SHA }}
        DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
    - name: "Push Docker images to Azure Container Registry using SHA as tag"
      run: |
        docker tag common:${{ steps.vars.outputs.SHORT_SHA }} ${{ env.DOCKER_REGISTRY }}/common:${{ steps.vars.outputs.SHORT_SHA }}
        docker push ${{ env.DOCKER_REGISTRY }}/common:${{ steps.vars.outputs.SHORT_SHA }}
        docker tag api:${{ steps.vars.outputs.SHORT_SHA }} ${{ env.DOCKER_REGISTRY }}/api:${{ steps.vars.outputs.SHORT_SHA }}
        docker push ${{ env.DOCKER_REGISTRY }}/api:${{ steps.vars.outputs.SHORT_SHA }} 
        docker tag background-worker:${{ steps.vars.outputs.SHORT_SHA }} ${{ env.DOCKER_REGISTRY }}/background-worker:${{ steps.vars.outputs.SHORT_SHA }}
        docker push ${{ env.DOCKER_REGISTRY }}/background-worker:${{ steps.vars.outputs.SHORT_SHA }}
    - name: "Push Docker images to Azure Container Registry using latest as tag"
      run: |
        docker tag common:${{ steps.vars.outputs.SHORT_SHA }} ${{ env.DOCKER_REGISTRY }}/common:latest
        docker push ${{ env.DOCKER_REGISTRY }}/common:latest
        docker tag api:${{ steps.vars.outputs.SHORT_SHA }} ${{ env.DOCKER_REGISTRY }}/api:latest
        docker push ${{ env.DOCKER_REGISTRY }}/api:latest
        docker tag background-worker:${{ steps.vars.outputs.SHORT_SHA }} ${{ env.DOCKER_REGISTRY }}/background-worker:latest
        docker push ${{ env.DOCKER_REGISTRY }}/background-worker:latest
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: 'Az CLI login with OpenID Connect'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: 'Get access token to ACR via Az CLI'
      uses: azure/CLI@v1
      with:
        azcliversion: 2.42.0
        inlineScript: |
          TOKEN=$(az acr login --name ${{ env.DOCKER_REGISTRY }} --expose-token -o tsv --query accessToken)
          echo "ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV
    - name: 'Login to ACR using access token'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: "00000000-0000-0000-0000-000000000000"
        password: ${{ env.ACCESS_TOKEN }}
    - uses: actions/checkout@v3
    - name: 'Write short sha to outputs'
      id: vars
      run: |
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
    - name: "Deploy services to ACA"
      uses: azure/CLI@v1
      with:
        azcliversion: 2.42.0
        inlineScript: |  
          az config set extension.use_dynamic_install=yes_without_prompt
          bash ${GITHUB_WORKSPACE}/ci/deploy.sh ${{ steps.vars.outputs.SHORT_SHA }}